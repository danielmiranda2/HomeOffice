@page "/fetchdata"
@using HomeOffice.Models
@inject IScheduleService ScheduleService

<h1>Escalas de Home Office</h1>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Data</th>
            <th>Colaboradores Escalados</th>
            <th>Status</th>
            <th>Ações</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var schedule in schedules)
        {
            <tr>
                <td>@schedule.Date.ToString("dd/MM/yyyy")</td>
                <td>
                    <EmployeeList Employees="schedule.Employees" />
                </td>
                <td>
                    @if (schedule.IsClosed)
                    {
                        <span class="badge bg-success">Concluída</span>
                    }
                    else
                    {
                        <span class="badge bg-warning">Aberta</span>
                    }
                </td>
                <td>
                    <div class="btn-group">
                        <button class="btn btn-primary" @onclick="() => ViewScheduleDetails(schedule)">
                            <i class="bi bi-eye"></i> Detalhes
                        </button>
                        <button class="btn btn-warning" @onclick="() => EditSchedule(schedule)">
                            <i class="bi bi-pencil"></i> Editar
                        </button>
                        <button class="btn btn-danger" @onclick="() => DeleteSchedule(schedule)">
                            <i class="bi bi-trash"></i> Excluir
                        </button>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Schedule> schedules;

    protected override async Task OnInitializedAsync()
    {
        schedules = await ScheduleService.GetAllSchedulesAsync();
    }

    private async Task ViewScheduleDetails(Schedule schedule)
    {
        // Lógica para visualizar os detalhes da escala
        var selectedSchedule = await ScheduleService.GetScheduleByIdAsync(schedule.Id);
        // Navegue para a página de detalhes da escala
    }

    private async Task EditSchedule(Schedule schedule)
    {
        // Lógica para editar a escala
        var scheduleToEdit = await ScheduleService.GetScheduleByIdAsync(schedule.Id);
        // Navegue para a página de edição da escala
    }

    private async Task DeleteSchedule(Schedule schedule)
    {
        // Lógica para excluir a escala
        await ScheduleService.DeleteScheduleAsync(schedule.Id);
        schedules.Remove(schedule);
        StateHasChanged();
    }
}
